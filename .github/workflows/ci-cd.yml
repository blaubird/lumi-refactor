name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
    paths:
      - 'api/**'
  pull_request:
    branches: [main, staging]
    paths:
      - 'api/**'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio flake8 black isort mypy
      
      - name: Lint with flake8
        working-directory: ./api
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check formatting with black
        working-directory: ./api
        run: |
          black --check .
      
      - name: Check imports with isort
        working-directory: ./api
        run: |
          isort --check-only --profile black .
      
      - name: Type check with mypy
        working-directory: ./api
        run: |
          mypy --ignore-missing-imports app/
      
      - name: Setup database for testing
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          python scripts/setup_db.py
      
      - name: Run tests
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          WH_TOKEN: test_token
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term tests/
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.xml
          fail_ci_if_error: false
      
      - name: Check Alembic migrations
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          alembic check
          # Verify migrations can be applied cleanly
          alembic upgrade head
          # Verify migrations can be reversed
          alembic downgrade base
          # Verify migrations can be reapplied
          alembic upgrade head

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}/api:${{ github.sha }}
            ghcr.io/${{ github.repository }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
      
      - name: Deploy to Railway Staging
        working-directory: ./api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service api-staging

  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
      
      - name: Deploy to Railway Production
        working-directory: ./api
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service api
